#!/usr/bin/perl
#
# Copyright (c) 2013 .SE (The Internet Infrastructure Foundation).
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Written by Patrik Wallstr√∂m <pawal@iis.se>

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use POSIX;
use File::Path qw(make_path);
use File::Basename qw(fileparse);

# command line options
my @files;
my $help;
my $quiet;
my $reportDir;

# globals
my $codepoints = 'allcodepoints.txt';
my $scriptfile = 'Scripts.txt';
my $codetable;

# short codepoints
my %codes = (
	1 => 'PVALID',
	2 => 'CONTEXTJ',
	3 => 'CONTEXTO',
	4 => 'UNASSIGNED',
	5 => 'DISALLOWED'
);

# reverse lookup table for codepoints
my %codesrev = reverse %codes;

# Entry point
main();

sub main {
	GetOptions(
		'help|?'   => \$help,
		'files=s{,}'   => \@files,
		'quiet'    => \$quiet,
		'reportDir=s' => \$reportDir,
	) or pod2usage(2);

	# help command line option
	if ($help or not @files) {
		pod2usage(1);
		exit;
	}

	# Assert that all files exist
	foreach my $file (@files) {
		die "No file $file" if not -f $file;
	}

	# Capture a handle to the codepoint hash
	$codetable = createCodepoints();

	# Test all input files
	testAllFiles(@files);
}

sub createCodepoints {
	# Read codepoints file and assign it to hash
	my %codetable;
	my $i=0;
	if (! -f "$codepoints") { die "$codepoints missing" };
	print STDERR "Reading $codepoints\n" if not $quiet;
	open(IDN, "<$codepoints") or die "Cannot open file $!";
	while (<IDN>) {
		my $line = $_;
		if ($line =~ /^([0-9a-f]{4,});([A-Z]+)/i) {
			if (defined $codesrev{$2}) {
				my $uchar = $1; my $status = $2;
				$codetable{$uchar}->{'cp'} = $codesrev{$status};
				$line =~ /.*;(.*)$/;
				$codetable{$uchar}->{'desc'} = $1;
				$i++;
			} else {
				print STDERR "ERROR: Unassigned Unicode status code from $codepoints: $2\n";
			}
		}
	}
	close IDN;

	# Read script file to gather all Unicode Scripts in hash
	print STDERR "Reading $scriptfile\n" if not $quiet;
	open (SCRIPT, "<$scriptfile") or die "Cannot open file: $!";
	while (<SCRIPT>) {
		next if /^#/ or /^$/; # comment or empty line
		my $line = $_;
		$line =~ /\; (.*) #/;
		my $script = $1;
		if ($line =~ /^([0-9A-F]+)\.\.([0-9A-F]+)/) { # range of values
			my $start = hex($1);
			my $end   = hex($2);
			# loop through the whole range
			for (my $i = $start; $i <= $end; $i++) {
				my $hex = sprintf("%04X", $i);
				# add script to hash
				$codetable{"$hex"}->{'script'} = $script;
			}
		}
		if ($line =~ /^([0-9A-F]+)/) { # single hit
			# add script to hash
			$codetable{$1}->{'script'} = $script;
		}
	}
	return \%codetable;
}

sub createReportTable {
	my $result = shift;

	# Create new table for the logs
	my $reportTable;
	$reportTable = "line: character ; property ; script # description\n";
	foreach my $uchar (sort keys %{$result}) {
		$reportTable .= $result->{$uchar}->{'line'}.": $uchar ; "
		.$result->{$uchar}->{'status'}." ; "
		.$result->{$uchar}->{'script'}." # "
		.$result->{$uchar}->{'desc'}."\n";
	}
	return $reportTable;
}

sub createReportSummary {
	my $file = shift;
	my $result = shift;

	# Create a summary
	my $reportSummary;
	my %summaryProperty;
	my %summaryScript;

	# Summary pt 1, properties
	foreach my $uchar (sort keys %{$result}) {
		if ($result->{$uchar}->{'status'} eq 'DISALLOWED' or
			$result->{$uchar}->{'status'} eq 'UNASSIGNED') {
		}
		$summaryProperty{$result->{$uchar}->{'status'}}++;
		$summaryScript{$result->{$uchar}->{'script'}}++;
	}
	$reportSummary = "\n$file\n";

	$reportSummary .= " # Properties\n";
	foreach my $property (sort keys %summaryProperty) {
		$reportSummary .=  "   $property: ".$summaryProperty{$property}."\n";
	}
	$reportSummary .= " # Scripts\n";
	foreach my $script (sort keys %summaryScript) {
		$reportSummary .= "   $script: ".$summaryScript{$script}."\n";
	}

	return $reportSummary;
}

sub testAllFiles {
	foreach my $file (@files) {
		testFile($codetable, $file);
	}
}

sub testFile {
	my $codetable = shift;
	my $file = shift;
	my %result;
	my $line = 0;
	my $charmatch = qr/U\+[0-9A-F]+/; # match U+HHHH pattern
	open(FILE, "<$file") or die "Cannot open file $!";
	while (<FILE>) {
		$line++; # line counter
		next if /^#/;                 # bail if line begins with comment
		my $string = $_;
		$string =~ s/#.*//o;          # remove comments from lines
		$string =~ s/^\s+//o;         # remove leading whitespace
		$string =~ s/\s+$//o;         # remove trailing whitespace
		next if (length($string)==0); # bail if empty

		my @chars = $string=~ /$charmatch/gx;
		foreach my $uchar (@chars) {
			$uchar =~ /^U\+(.*)/;
			$result{$uchar}->{'line'}   = $line;
			$result{$uchar}->{'status'} = $codes{$codetable->{$1}->{'cp'}};
			$result{$uchar}->{'desc'}   = $codetable->{$1}->{'desc'};
			$result{$uchar}->{'script'} = $codetable->{$1}->{'script'};
		}
	}

	my $timestamp = POSIX::strftime("%Y-%m-%d %H:%M:%S", localtime);
	my $header = "# Report based on input file $file\n";

	my $reportTable = createReportTable(\%result);
	my $reportSummary = createReportSummary($file, \%result);

	print $reportSummary if not $quiet;

	if (defined $reportDir) {
		# Prepare report directory
		my $outfile = "$reportDir/$file";
		my ($file, $directories, $ext) = fileparse($outfile);
		make_path($directories);

		open(TABLE, ">$outfile") or die "Cannot write $outfile $!";
		print TABLE $header;
		print TABLE $reportTable;
		close TABLE;

		print "$outfile written\n" if not $quiet;
	}
}

=head1 NAME

idn-properties

=head1 DESCRIPTION

This tools runs code point tests for IDN

=head1 USAGE

idn-properties --files idn-table1.txt idn-table2.txt

Mandatory arguments:

--files           One or more files (space separated) with code points to be tested

Optional arguments:

--help            Show this help screen
--quiet           Do not print trace information
--reportDir       Write reports into the provided directory

=cut
